@page "{handler?}"
@model IndexModel
@using DevExtremeAspNetCoreApp1.Models
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

<h2>Home</h2>

@(Html.DevExtreme().DataGrid<SampleOrder>()
    .ShowBorders(true)
    .DataSource(
        d => d.RemoteController()
            .LoadUrl(Url.Page(null, "Get"))
            .InsertUrl(Url.Page(null, "Add"))
            .UpdateUrl(Url.Page(null, "Edit"))
            .DeleteUrl(Url.Page(null, "Delete"))
            .Key("OrderID")
            .OnBeforeSend(
                @<text>
                     function (op, ajax) { ajax.headers = { RequestVerificationToken: '@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken' }; }
                 </text>)
    )
    .DateSerializationFormat("yyyy-MM-dd")
    .Columns(columns => {
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit);
                b.Add().Name(GridColumnButtonName.Delete);
            });

        columns.AddFor(m => m.OrderID);
        columns.AddFor(m => m.OrderDate)
            .DataType(GridColumnDataType.Date);
        columns.AddFor(m => m.CustomerName);
        columns.AddFor(m => m.ShipCountry);
        columns.AddFor(m => m.ShipCity);
    })
    .Paging(p => p.PageSize(10))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .Grouping(g => g.AutoExpandAll(false))
    .RemoteOperations(true)
    .Summary(s => s
        .TotalItems(totalItems => {
            totalItems.AddFor(m => m.ShipCity).SummaryType(SummaryType.Count);
        })
        .GroupItems(groupItems => {
            groupItems.Add().SummaryType(SummaryType.Count);
        })
    )
    .Toolbar(toolbar => 
        toolbar.Items(items => {
            items.Add().Name("addRowButton")
                .ShowText(ToolbarItemShowTextMode.Always).Location(ToolbarItemLocation.Before)
                .Widget(w => w.Button().Text("Add"));

            items.Add().Name("exportCsv")
                .ShowText(ToolbarItemShowTextMode.Always).Location(ToolbarItemLocation.Before)
                .Widget(w => w.Button().Text("Export CSV")
                    .OnClick(@"function() {
                        window.location.href = '" + @Url.Page(null, "ExportCsv") + @"';
                    }"));
        })
    )
    .Editing(e => e.Mode(GridEditMode.Popup)
        .AllowAdding(true)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .UseIcons(true)
        .Popup(p => p
            .Title("Details")
            .ShowTitle(true)
            .Width(600)
            .Height("auto").MaxHeight("90vh")
            .OnContentReady(@"
                    function (e) {
                        e.component.option('toolbarItems[0].options.icon', 'check');
                        e.component.option('toolbarItems[1].options.icon', 'close');
                    }"
            )
        )
        .Form(f => f
            .ColCount(1)
            .Items(items =>
            {
                items.AddSimpleFor(m => m.OrderDate)
                    .Editor(t => t.DateBox()
                        .Max(DateTime.Today));
                items.AddSimpleFor(m => m.CustomerName);
                items.AddSimpleFor(m => m.ShipCountry);
                items.AddSimpleFor(m => m.ShipCity);
            })))
)
